var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = JuliaMBD","category":"page"},{"location":"#JuliaMBD","page":"Home","title":"JuliaMBD","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for JuliaMBD.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [JuliaMBD]","category":"page"},{"location":"#Base.:=>-Tuple{AbstractBlockOrPort, AbstractBlockOrPort}","page":"Home","title":"Base.:=>","text":"Base.:(=>)(out, in)\n\nThe method to create a line connecting two componets. When it uses with blocks, get_default_inport/get_default_outport are called in the method. The returned value is the out\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.Auto","page":"Home","title":"JuliaMBD.Auto","text":" Type Auto\n\nAuto means the variable type is determined automatically from the code\n\n\n\n\n\n","category":"type"},{"location":"#JuliaMBD.InPort","page":"Home","title":"JuliaMBD.InPort","text":"InPort <: AbstractInPort\n\nThe mutable struct for InPort. InPort corresponds to an argument of the function of block. The members are\n\nvar: A symbol of port. SymbolicValue is generic for the parametric types SymbolicValue{Tv}\nparent: A block involves the port itself.\nline: An instance of Line that connects from other outport to the inport\n\nExamples\n\njldoctest julia> x = InPort() # name is determined by gensym, Type is Auto julia> x = InPort(:x) # name is :x, Type is Auto julia> x = InPort(Float64) # name is determined by gensym, Type is Float64 julia> x = InPort(:x, Float64) # name is :x, Type is Float64`\n\n\n\n\n\n","category":"type"},{"location":"#JuliaMBD.Line","page":"Home","title":"JuliaMBD.Line","text":"Line\n\nA mutable struct of Line to connect from outport to inport. The members are\n\nvar: A symbol of line. SymbolicValue is generic for the parametric types SymbolicValue{Tv}. But now, the type is fixed as Auto.\nsource: An instance of outport\ndest: An instance of inport\n\n\n\n\n\n","category":"type"},{"location":"#JuliaMBD.OutPort","page":"Home","title":"JuliaMBD.OutPort","text":"OutPort <: AbstractOutPort\n\nThe mutable struct for OutPort. OutPort corresponds to a returend value from the function of block. The members are\n\nvar: A symbol of port. SymbolicValue is generic for the parametric types SymbolicValue{Tv}\nparent: A block involves the port itself.\nlines: A vector of instances of Line that connects from the outport to others.\n\nExamples\n\njldoctest julia> x = OutPort() # name is determined by gensym, Type is Auto julia> x = OutPort(:x) # name is :x, Type is Auto julia> x = OutPort(Float64) # name is determined by gensym, Type is Float64 julia> x = OutPort(:x, Float64) # name is :x, Type is Float64`\n\n\n\n\n\n","category":"type"},{"location":"#JuliaMBD.SymbolicValue","page":"Home","title":"JuliaMBD.SymbolicValue","text":"SymbolicValue{Tv}\n\nThe type expresses a symbolic parameter\n\n\n\n\n\n","category":"type"},{"location":"#JuliaMBD.UndefBlock","page":"Home","title":"JuliaMBD.UndefBlock","text":" UndefBlock\n\nA struct of UndefiedBlock\n\n\n\n\n\n","category":"type"},{"location":"#JuliaMBD.UndefLine","page":"Home","title":"JuliaMBD.UndefLine","text":"UndefLine\n\nA type meaning Undef\n\n\n\n\n\n","category":"type"},{"location":"#JuliaMBD.Gain-Tuple{Any}","page":"Home","title":"JuliaMBD.Gain","text":"Gain(K::Parameter; inport::AbstractInPort = InPort(), outport::AbstractOutPort = OutPort())\nGain(;K::Parameter, inport::AbstractInPort = InPort(), outport::AbstractOutPort = OutPort())\n\nA constructor for a Gain block\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.expr-Tuple{AbstractBlock}","page":"Home","title":"JuliaMBD.expr","text":"expr(b)\n\nA function to get Expr for main processes\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.expr_call-Tuple{JuliaMBD.AbstractInlineBlock}","page":"Home","title":"JuliaMBD.expr_call","text":"expr_call(b)\n\nA function to get Expr when the block b is called.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.expr_func-Tuple{JuliaMBD.AbstractFunctionBlock}","page":"Home","title":"JuliaMBD.expr_func","text":"expr_func\n\nExpr for definition of function\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.expr_refvalue-Tuple{AbstractLine}","page":"Home","title":"JuliaMBD.expr_refvalue","text":"expr_refvalue(x)\n\nCreate Expr to refer the line.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.expr_refvalue-Tuple{AbstractPort}","page":"Home","title":"JuliaMBD.expr_refvalue","text":"expr_refvalue(x)\n\nCreate Expr to refer the port.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.expr_refvalue-Union{Tuple{SymbolicValue{Tv}}, Tuple{Tv}} where Tv","page":"Home","title":"JuliaMBD.expr_refvalue","text":"expr_refvalue(x)\n\nCreate Expr to refer the symbolic value.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.expr_setvalue-Tuple{AbstractLine, Any}","page":"Home","title":"JuliaMBD.expr_setvalue","text":"expr_setvalue(x, expr)\n\nCreate Expr to set x = expr.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.expr_setvalue-Tuple{AbstractPort, Any}","page":"Home","title":"JuliaMBD.expr_setvalue","text":"expr_setvalue(x, expr)\n\nCreate Expr to set x = expr.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.expr_setvalue-Tuple{SymbolicValue{Auto}, Any}","page":"Home","title":"JuliaMBD.expr_setvalue","text":"expr_setvalue(x, expr)\n\nCreate Expr to set x = expr.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.get_default_inport-Tuple{AbstractBlock}","page":"Home","title":"JuliaMBD.get_default_inport","text":"get_default_inport(b)\n\nA function to get a default inport. This function calls a specific getdefaultinport by a type of given block.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.get_default_inport-Tuple{AbstractInPort}","page":"Home","title":"JuliaMBD.get_default_inport","text":"getdefaultinport(p::AbstractInPort)    getdefaultoutport(p::AbstractInPort)\n\nGet an instance of default in/out port.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.get_default_inport-Tuple{AbstractOutPort}","page":"Home","title":"JuliaMBD.get_default_inport","text":"getdefaultinport(p::AbstractOutPort)    getdefaultoutport(p::AbstractOutPort)\n\nGet an instance of default in/out port.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.get_default_inport-Tuple{JuliaMBD.UndefBlock}","page":"Home","title":"JuliaMBD.get_default_inport","text":"get_default_inport(b::UndefBlock)\nget_default_outport(b::UndefBlock)\n\nReturn a nothing as an instance of default in/out port.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.get_default_outport-Tuple{AbstractBlock}","page":"Home","title":"JuliaMBD.get_default_outport","text":"get_default_outport(b)\n\nA function to get a default outport. This function calls a specific getdefaultoutport by a type of given block.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.get_inports-Tuple{AbstractBlock}","page":"Home","title":"JuliaMBD.get_inports","text":"get_inports(b)\nget_inports(b, key)\n\nA function to get inports.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.get_line-Tuple{AbstractInPort}","page":"Home","title":"JuliaMBD.get_line","text":"get_line(x::AbstractInPort)\n\nGet an input line of InPort.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.get_lines-Tuple{AbstractOutPort}","page":"Home","title":"JuliaMBD.get_lines","text":"get_lines(x::AbstractOutPort)\n\nGet output lines from OutPort.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.get_name-Tuple{AbstractPort}","page":"Home","title":"JuliaMBD.get_name","text":"get_name(x::AbstractPort)\n\nGet a name (Symbol).\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.get_name-Tuple{SymbolicValue}","page":"Home","title":"JuliaMBD.get_name","text":"get_name(x::SymbolicValue)\n\nGet a name (Symbol).\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.get_outports-Tuple{AbstractBlock}","page":"Home","title":"JuliaMBD.get_outports","text":"get_outports(b)\nget_outports(b, key)\n\nA function to get outports.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.get_params-Tuple{AbstractBlock}","page":"Home","title":"JuliaMBD.get_params","text":"get_params(b)\nget_params(b, key)\n\nA function to get params.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.get_parent-Tuple{AbstractPort}","page":"Home","title":"JuliaMBD.get_parent","text":"get_parent(x::AbstractPort)\n\nGet a parent block.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.get_source-Tuple{AbstractLine}","page":"Home","title":"JuliaMBD.get_source","text":"get_source(x::AbstractLine)\n\nGet a source of line.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.get_target-Tuple{AbstractLine}","page":"Home","title":"JuliaMBD.get_target","text":"get_target(x::AbstractLine)\n\nGet a target of line.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.get_type-Tuple{AbstractBlock}","page":"Home","title":"JuliaMBD.get_type","text":"get_type(b)\n\nA function to get an instance of Val type\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.get_var-Tuple{AbstractLine}","page":"Home","title":"JuliaMBD.get_var","text":"get_var(x::AbstractLine)\n\nGet a symbolicvar.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.get_var-Tuple{AbstractPort}","page":"Home","title":"JuliaMBD.get_var","text":"get_var(x::AbstractPort)\n\nGet a symbolicvar.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.next-Tuple{AbstractBlock}","page":"Home","title":"JuliaMBD.next","text":"next(b)\n\nGet output blocks\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.prev-Tuple{AbstractBlock}","page":"Home","title":"JuliaMBD.prev","text":"prev(b)\n\nGet input blocks\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.set_line!-Tuple{AbstractInPort, AbstractLine}","page":"Home","title":"JuliaMBD.set_line!","text":"set_line!(x::AbstractInPort, l::AbstractLine)\n\nSet an input line to InPort.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.set_line!-Tuple{AbstractOutPort, AbstractLine}","page":"Home","title":"JuliaMBD.set_line!","text":"set_line!(x::AbstractOutPort, l::AbstractLine)\n\nSet an output line to OutPort.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.set_parent!-Tuple{AbstractPort, AbstractBlock}","page":"Home","title":"JuliaMBD.set_parent!","text":"set_parent!(x::AbstractPort, b::AbstractBlock)\n\nSet a parent block.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaMBD.tsort-Tuple{Vector{AbstractBlock}}","page":"Home","title":"JuliaMBD.tsort","text":"tsort\n\nTomprogical sort to determine the sequence of expression in SystemBlock\n\n\n\n\n\n","category":"method"}]
}
